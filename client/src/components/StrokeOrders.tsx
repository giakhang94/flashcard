import React, { useEffect, useState } from "react";
import chart from "../assets/stroke-order-chart.jpg";

// --- Khai b√°o TypeScript Interface ---
interface StrokeRule {
  id: string;
  name: string;
  category: "Kana" | "Kanji" | "Special";
  rules: string[];
  positionSizeNote?: string;
  example?: string;
}

// --- Dummy Data: D·ªØ li·ªáu Quy t·∫Øc Th·ª© t·ª± N√©t ---
const strokeRulesData: StrokeRule[] = [
  {
    id: "kanji",
    name: "Kanji (H√°n T·ª±)",
    category: "Kanji",
    rules: [
      "Nguy√™n t·∫Øc c∆° b·∫£n: Tr√™n tr∆∞·ªõc, d∆∞·ªõi sau (‰∏ä„Åã„Çâ‰∏ã„Å∏) v√† Tr√°i tr∆∞·ªõc, ph·∫£i sau (Â∑¶„Åã„ÇâÂè≥„Å∏).",
      "N√©t ngang tr∆∞·ªõc, n√©t d·ªçc sau (khi giao nhau): V√≠ d·ª•: ÂçÅ.",
      "N√©t ph·∫©y tr∆∞·ªõc, n√©t m√°c sau (v·ªõi c√°c n√©t ch√©o ƒë·ªëi x·ª©ng): V√≠ d·ª•: ‰∫∫.",
      "Vi·∫øt ph·∫ßn gi·ªØa tr∆∞·ªõc v·ªõi c√°c ch·ªØ ƒë·ªëi x·ª©ng theo chi·ªÅu d·ªçc: V√≠ d·ª•: Ê∞¥.",
      "Vi·∫øt ph·∫ßn bao quanh ngo√†i tr∆∞·ªõc, ph·∫ßn b√™n trong sau: V√≠ d·ª•: ÂõΩ.",
      "N√©t ƒë√≥ng/n√©t xuy√™n ngang/d·ªçc qua nhi·ªÅu n√©t kh√°c th∆∞·ªùng vi·∫øt SAU C√ôNG: V√≠ d·ª•: ‰∏≠.",
    ],
    positionSizeNote:
      "Vi·∫øt c√¢n ƒë·ªëi trong 1 √¥ vu√¥ng. Tu√¢n th·ªß th·ª© t·ª± n√©t gi√∫p ch·ªØ c√¢n ƒë·ªëi v√† d·ªÖ nh·ªõ h∆°n.",
    example:
      "Ch·ªØ Áî∞ (ƒêi·ªÅn): Vi·∫øt n√©t ngo√†i tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn 2 n√©t ngang b√™n trong, cu·ªëi c√πng l√† n√©t ƒë√≥ng d·ªçc.",
  },
  {
    id: "hiragana",
    name: "Hiragana („Å≤„Çâ„Åå„Å™)",
    category: "Kana",
    rules: [
      "Tr√™n tr∆∞·ªõc, d∆∞·ªõi sau.",
      "Tr√°i tr∆∞·ªõc, ph·∫£i sau.",
      "Ngang tr∆∞·ªõc, d·ªçc sau (khi giao nhau).",
      "Vi·∫øt c√°c n√©t li·ªÅn m·∫°ch, ch√∫ √Ω ƒë·ªô cong v√† m√≥c m·ªÅm m·∫°i.",
    ],
    positionSizeNote: "K√≠ch th∆∞·ªõc chu·∫©n (1 √¥ vu√¥ng).",
    example:
      "Ch·ªØ „ÅÇ (a): N√©t ngang $\\to$ n√©t s·ªï/cong $\\to$ n√©t ph·∫©y nh·ªè cu·ªëi c√πng.",
  },
  {
    id: "katakana",
    name: "Katakana („Ç´„Çø„Ç´„Éä)",
    category: "Kana",
    rules: [
      "Tr√™n tr∆∞·ªõc, d∆∞·ªõi sau.",
      "Tr√°i tr∆∞·ªõc, ph·∫£i sau.",
      "Ngang tr∆∞·ªõc, d·ªçc sau.",
      "C√°c n√©t th·∫≥ng, g√≥c c·∫°nh r√µ r√†ng, d·ª©t kho√°t.",
    ],
    positionSizeNote: "K√≠ch th∆∞·ªõc chu·∫©n (1 √¥ vu√¥ng).",
    example:
      "Ch·ªØ „Ç® (e): N√©t ngang tr√™n $\\to$ n√©t ngang gi·ªØa $\\to$ n√©t s·ªï ƒë·ª©ng.",
  },
  {
    id: "small_kana",
    name: "Ch·ªØ Nh·ªè (√Çm Gh√©p/X√∫c √Çm)",
    category: "Special",
    rules: [
      "Th·ª© t·ª± n√©t KH√îNG ƒê·ªîI so v·ªõi phi√™n b·∫£n ch·ªØ c√°i l·ªõn (v√≠ d·ª•: Th·ª© t·ª± n√©t c·ªßa „ÇÉ/„ÇÖ/„Çá gi·ªëng „ÇÑ/„ÇÜ/„Çà).",
      "Lu√¥n vi·∫øt **SAU C√ôNG** (sau ch·ªØ Kana c∆° b·∫£n ƒë·ª©ng tr∆∞·ªõc n√≥).",
    ],
    positionSizeNote:
      "**K√≠ch th∆∞·ªõc:** Kho·∫£ng **1/4** (ch·ªâ b·∫±ng m·ªôt n·ª≠a so v·ªõi ch·ªØ th∆∞·ªùng).\n**V·ªã tr√≠:** Th·∫•p h∆°n v√† n·∫±m ·ªü d∆∞·ªõi b√™n ph·∫£i (v·ªõi √¢m gh√©p) ho·∫∑c ch√≠nh gi·ªØa (v·ªõi x√∫c √¢m $\\small{„Å£}$/$\\small{„ÉÉ}$).",
    example: "„Åç $\\small{„ÇÉ}$ (kya), „Ç´ $\\small{„ÉÉ}$ „Éó (kappu).",
  },
  {
    id: "dakuten",
    name: "D·∫•u ƒê·ª•c/B√°n ƒê·ª•c (ÊøÅÁÇπ/ÂçäÊøÅÁÇπ)",
    category: "Special",
    rules: [
      "Vi·∫øt D·∫•u ƒê·ª•c ($\text{''}$) v√† B√°n ƒê·ª•c ($\text{¬∞}$) **SAU C√ôNG**.",
      "Th·ª© t·ª± vi·∫øt ch·ªØ Kana c∆° b·∫£n (vd: „Åã, „ÅØ) ph·∫£i ho√†n th√†nh tr∆∞·ªõc.",
    ],
    positionSizeNote: "V·ªã tr√≠: **G√≥c tr√™n b√™n ph·∫£i** c·ªßa ch·ªØ Kana c∆° b·∫£n.",
    example: "„Åå (ga), „Å± (pa).",
  },
  {
    id: "choonpu",
    name: "Tr∆∞·ªùng √Çm Katakana („Éº)",
    category: "Special",
    rules: [
      "L√† k√Ω t·ª± ri√™ng (Ch≈çonpu), ch·ªâ c√≥ **m·ªôt n√©t ngang**.",
      "Lu√¥n vi·∫øt **SAU C√ôNG** sau ch·ªØ Kana Katakana ƒë·ª©ng tr∆∞·ªõc n√≥.",
    ],
    positionSizeNote:
      "K√≠ch th∆∞·ªõc: B·∫±ng 1 √¥ ch·ªØ (nh∆∞ m·ªôt ch·ªØ Kana th√¥ng th∆∞·ªùng).\nV·ªã tr√≠: Ch√≠nh gi·ªØa √¥ ch·ªØ, l√† m·ªôt n√©t ngang k√©o d√†i t·ª´ tr√°i sang ph·∫£i.",
    example: "„É©„Éº„É°„É≥ (rƒÅmen).",
  },
];

// --- Component Modal ---
const StrokeChartModal: React.FC<{ isOpen: boolean; onClose: () => void }> = ({
  isOpen,
  onClose,
}) => {
  // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n ph√≠m (cho ESC)
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        onClose();
      }
    };
    document.addEventListener("keydown", handleEscape);
    return () => document.removeEventListener("keydown", handleEscape);
  }, [onClose]);
  if (!isOpen) return null;
  return (
    // Backdrop
    <div
      className="fixed inset-0  bg-black bg-opacity-75 flex items-center justify-center z-50 p-4 transition-opacity"
      onClick={onClose} // Click b√™n ngo√†i modal
    >
      {/* Modal Content (ngƒÉn ch·∫∑n s·ª± ki·ªán click lan ra backdrop) */}
      <div
        className="bg-gray-800 rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-auto transform transition-all p-6"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex justify-between items-center border-b border-teal-600 pb-3 mb-4">
          <h3 className="text-xl font-bold text-teal-400">
            Bi·ªÉu ƒê·ªì Th·ª© T·ª± N√©t Chi Ti·∫øt
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors text-2xl"
            aria-label="Close modal"
          >
            &times;
          </button>
        </div>

        <p className="text-gray-300 mb-4">
          **L∆∞u √Ω:** ƒê√¢y l√† b·∫£ng ch·ªØ c√°i ch√≠nh. C√°c √¢m ƒë·ª•c, tr∆∞·ªùng √¢m,... th∆∞·ªùng
          l√† c√°c k√Ω t·ª± nh·ªè, ho·∫∑c k√Ω t·ª± ƒë∆∞·ª£c l·∫•y ra t·ª´ b·∫£ng ch√≠nh n√†y. Th∆∞·ªùng s·∫Ω
          vi·∫øt nh·ªè h∆°n, ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh v√† vi·∫øt sau c√πng, th·ª© t·ª± n√©t y nh∆∞ b·∫£ng
          ch√≠nh
        </p>

        {/* --- N∆°i ƒë·∫∑t ·∫£nh c·ªßa b·∫°n --- */}
        <img
          // THAY TH·∫æ ƒê∆Ø·ªúNG D·∫™N D∆Ø·ªöI ƒê√ÇY B·∫∞NG H√åNH ·∫¢NH C·ª¶A B·∫†N
          src={chart}
          alt="Japanese Stroke Order Charts (Hiragana, Katakana, Kanji Examples)"
          className="w-full h-auto rounded-lg border border-teal-700"
        />
        {/* ---------------------------------- */}
      </div>
    </div>
  );
};

// --- Component Ch√≠nh ---
const StrokeOrderGuide: React.FC = () => {
  const [selectedId, setSelectedId] = useState<string>(strokeRulesData[0].id);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false); // State cho Modal
  const selectedRule = strokeRulesData.find((rule) => rule.id === selectedId);

  return (
    // √Åp d·ª•ng Dark Mode container
    <div className="dark bg-neutral-900 rounded-md min-h-screen text-gray-100 p-4 md:p-8 my-5">
      <h1 className="text-3xl font-bold text-teal-400 mb-6 border-b border-teal-600 pb-2">
        H∆∞·ªõng D·∫´n Th·ª© T·ª± N√©t (Hitsujun) Ti·∫øng Nh·∫≠t ‚úçÔ∏è
      </h1>

      <div className="flex flex-col md:flex-row gap-6">
        {/* --- C·ªôt 1: Danh s√°ch c√°c lo·∫°i k√Ω t·ª± & N√∫t c·ªë ƒë·ªãnh --- */}
        <div className="md:w-1/3 w-full bg-gray-800 shadow-xl rounded-xl p-4 h-fit sticky top-4">
          <h2 className="text-xl font-semibold text-teal-400 mb-4">
            C√°c Lo·∫°i K√Ω T·ª±
          </h2>
          <nav className="space-y-2 mb-6">
            {strokeRulesData.map((item) => (
              <button
                key={item.id}
                onClick={() => setSelectedId(item.id)}
                className={`w-full text-left p-3 rounded-lg transition-colors duration-200 font-semibold ${
                  selectedId === item.id
                    ? "bg-teal-600 text-white shadow-md"
                    : "bg-gray-700 text-gray-200 hover:bg-teal-700"
                }`}
              >
                {item.name}
              </button>
            ))}
          </nav>

          {/* N√∫t c·ªë ƒë·ªãnh xem Charts (Modal Trigger) */}
          <button
            onClick={() => setIsModalOpen(true)}
            className="w-full p-4 rounded-lg bg-teal-500 text-white font-bold hover:bg-teal-400 transition-colors shadow-lg sticky bottom-4 md:bottom-auto"
          >
            üëÅÔ∏è Xem Stroke Order Charts
          </button>
        </div>

        {/* --- C·ªôt 2: Chi ti·∫øt Quy t·∫Øc Vi·∫øt --- */}
        <div className="md:w-2/3 w-full bg-gray-800 shadow-xl rounded-xl p-6">
          {selectedRule ? (
            <>
              <h2 className="text-2xl font-bold text-teal-400 mb-4 border-b border-gray-700 pb-2">
                Quy T·∫Øc Vi·∫øt: {selectedRule.name}
              </h2>
              <div className="space-y-4">
                {/* Nguy√™n t·∫Øc */}
                <section>
                  <h3 className="text-lg font-semibold text-teal-500 mb-2 flex items-center">
                    <span className="text-teal-400 mr-2">üìå</span> Nguy√™n T·∫Øc
                    Chung
                  </h3>
                  <ul className="list-disc list-inside space-y-2 text-gray-300 ml-4">
                    {selectedRule.rules.map((rule, index) => (
                      <li key={index} className="text-base font-semibold">
                        {rule}
                      </li>
                    ))}
                  </ul>
                </section>

                {/* V·ªã tr√≠ v√† K√≠ch th∆∞·ªõc */}
                {selectedRule.positionSizeNote && (
                  <section className="bg-teal-900/50 p-4 rounded-lg border border-teal-700">
                    <h3 className="text-lg font-semibold text-teal-400 mb-2 flex items-center">
                      <span className="text-teal-400 mr-2">üìê</span> K√≠ch Th∆∞·ªõc
                      & V·ªã Tr√≠
                    </h3>
                    <p className="text-base text-gray-200 font-semibold">
                      {selectedRule.positionSizeNote}
                    </p>
                  </section>
                )}

                {/* V√≠ d·ª• */}
                {selectedRule.example && (
                  <section>
                    <h3 className="text-lg font-semibold text-teal-500 mb-2 flex items-center">
                      <span className="text-teal-400 mr-2">üí°</span> V√≠ D·ª• Minh
                      H·ªça
                    </h3>
                    <div className="bg-gray-700 p-4 rounded-lg text-gray-100 font-mono text-base">
                      {selectedRule.example}
                    </div>
                  </section>
                )}
              </div>
            </>
          ) : (
            <p className="text-lg text-gray-500">
              Ch·ªçn m·ªôt lo·∫°i k√Ω t·ª± ·ªü c·ªôt b√™n tr√°i ƒë·ªÉ xem chi ti·∫øt quy t·∫Øc vi·∫øt.
            </p>
          )}
        </div>
      </div>

      {/* --- Modal Component --- */}
      <StrokeChartModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />
    </div>
  );
};

export default StrokeOrderGuide;
